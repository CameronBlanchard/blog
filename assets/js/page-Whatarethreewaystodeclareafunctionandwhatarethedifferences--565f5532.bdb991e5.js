(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{474:function(e,t,a){"use strict";a.r(t);var n=a(2),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"what-are-three-ways-to-declare-a-function-and-what-are-the-differences"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-are-three-ways-to-declare-a-function-and-what-are-the-differences"}},[e._v("#")]),e._v(" What are three ways to declare a function and what are the differences?")]),e._v(" "),a("h1",{attrs:{id:"what-is-the-difference-between-parameters-and-arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-the-difference-between-parameters-and-arguments"}},[e._v("#")]),e._v(" What is the difference between Parameters and Arguments?")]),e._v(" "),a("h1",{attrs:{id:"what-are-high-order-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-are-high-order-functions"}},[e._v("#")]),e._v(" What are high order functions?")]),e._v(" "),a("blockquote",[a("p",[e._v("Function then name.  This way we are defining the function and it can be hoisted.  Let name, function, then paremeters.  This is a function expression and can't be hoisted. let name, arrow, then parameters.  This is a shorter syntax for writing a function expression and doesn't create its own \"this\" value.")])]),e._v(" "),a("blockquote",[a("p",[e._v("Parameters are the names that are passed in a function.  Arguments are the values received from the parameter.")])]),e._v(" "),a("blockquote",[a("p",[e._v("When a function accepts a function as a parameter or returns a function, it is known as a high order function.")])])])}),[],!1,null,null,null);t.default=r.exports}}]);